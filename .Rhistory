#   # Replace any instances where there is a space anywhere in the X number, such as "X 0000789"
#   x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
#
#   padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 9, side = "left", pad = "X")  # Pad the character vector and assign to a temporary list
#
#   # Replace X's with 0's when there's more than one X in an entry. Should only be X0, X00, X000, etc. Assign to new vector
#   clean.x <- stringr::str_replace_all(padded,
#                                       pattern = c(
#                                         "XXXXXXXXX{1}" = "X00000000",
#                                         "XXXXXXXX{1}" = "X0000000",
#                                         "XXXXXXX{1}" = "X000000",
#                                         "XXXXXX{1}" = "X00000",
#                                         "XXXXX{1}" = "X0000",
#                                         "XXXX{1}" = "X000",
#                                         "XXX{1}" = "X00",
#                                         "^XX" = "X0")
#   )
#
#   # Find entries that have non-X numbers such as "NO X #", "Not in APS", etc. Replace these with NA values
#   clean.x[grep("[A-Wa-w]\\D|[Y-Zy-z]\\D", clean.x)] <- NA
## If verify is TRUE, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("XA1234")
clean_x("678")
clean_x("X00020", using = "CII", value = "A07515123")
clean_x("X00A20", using = "CII", value = "A07515123")
clean_x <- function(x, using = NULL, value = "") {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
# Return the final string
# return(padded)
#   # Replace any instances where there is a space anywhere in the X number, such as "X 0000789"
#   x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
#
#   padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 9, side = "left", pad = "X")  # Pad the character vector and assign to a temporary list
#
#   # Replace X's with 0's when there's more than one X in an entry. Should only be X0, X00, X000, etc. Assign to new vector
#   clean.x <- stringr::str_replace_all(padded,
#                                       pattern = c(
#                                         "XXXXXXXXX{1}" = "X00000000",
#                                         "XXXXXXXX{1}" = "X0000000",
#                                         "XXXXXXX{1}" = "X000000",
#                                         "XXXXXX{1}" = "X00000",
#                                         "XXXXX{1}" = "X0000",
#                                         "XXXX{1}" = "X000",
#                                         "XXX{1}" = "X00",
#                                         "^XX" = "X0")
#   )
#
#   # Find entries that have non-X numbers such as "NO X #", "Not in APS", etc. Replace these with NA values
#   clean.x[grep("[A-Wa-w]\\D|[Y-Zy-z]\\D", clean.x)] <- NA
## If verify is TRUE, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("X00A20", using = "CII", value = "A07515123")
clean_x("678")
clean_x("X00020", using = "CII", value = "A07515123")
library(devtools)
load_all()
clean_x <- function(x, using = NULL, value = "") {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
# Return the final string
# return(padded)
#   # Replace any instances where there is a space anywhere in the X number, such as "X 0000789"
#   x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
#
#   padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 9, side = "left", pad = "X")  # Pad the character vector and assign to a temporary list
#
#   # Replace X's with 0's when there's more than one X in an entry. Should only be X0, X00, X000, etc. Assign to new vector
#   clean.x <- stringr::str_replace_all(padded,
#                                       pattern = c(
#                                         "XXXXXXXXX{1}" = "X00000000",
#                                         "XXXXXXXX{1}" = "X0000000",
#                                         "XXXXXXX{1}" = "X000000",
#                                         "XXXXXX{1}" = "X00000",
#                                         "XXXXX{1}" = "X0000",
#                                         "XXXX{1}" = "X000",
#                                         "XXX{1}" = "X00",
#                                         "^XX" = "X0")
#   )
#
#   # Find entries that have non-X numbers such as "NO X #", "Not in APS", etc. Replace these with NA values
#   clean.x[grep("[A-Wa-w]\\D|[Y-Zy-z]\\D", clean.x)] <- NA
## If verify is TRUE, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("X00020", using = "CII", value = "A07515123")
clean_x("X000A20", using = "CII", value = "A07515123")
clean_x("A000A20", using = "CII", value = "A07515123")
clean_x <- function(x, using = NULL, value = "") {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
## If the using argument is not null, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("A000A20", using = "CII", value = "A07515123")
clean_x("A000A20", using = "CII")
clean_x <- function(x, using = NULL, value = NULL) {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
## If the using argument is not null, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("A000A20", using = "CII")
clean_x("A000A20", using = "CII", value = "A07515123")
clean_x("X00020")
clean_x <- function(x, using = NULL, value = NULL) {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
## If the using argument is not null, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else if (!is.null(using) & is.null(value)) {
print("No value supplied to cross-reference")
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("X00020")
clean_x("A000A20", using = "CII")
?message
?warning
clean_x <- function(x, using = NULL, value = NULL) {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
## If the using argument is not null, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else if (!is.null(using) & is.null(value)) {
stop("No value supplied to cross-reference")
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("X00020")
clean_x("A000A20", using = "CII")
clean_x <- function(x, using = NULL, value = NULL) {
# Strip away all characters, even if it's something that indicates an empty value such as "No PB #"
x <- stringr::str_replace_all(x, pattern = "[A-Za-z]", replacement = "")
# Replace all whitespace
x <- stringr::str_replace_all(x, pattern = " ", replacement = "")
# Pad each element with zeros to become 6 digits long
padded <- vapply(x, stringr::str_pad, FUN.VALUE = "character", width = 8, side = "left", pad = "0")
# Add the PB prefix to all strings
padded <- stringr::str_c("X", padded)
# Convert the ones that originally used text to indicate null values to NA
padded[grep("X0000000", padded)] <- NA
## If the using argument is not null, use the reference table to verify the X numbers.
if (is.null(using)) {
# Return the cleaned up version of the character vector
return(padded)
} else if (!is.null(using) & is.null(value)) {
stop("The 'value' argument is null when 'using' argument is not null")
} else {
verified <- obtain_id(obtain = "X", using = using, value = value)
return(verified)
}
}
clean_x("X00020")
clean_x("A000A20", using = "CII", value = "A07515123")
clean_x("A000A20", using = "CII")
document()
library(testthat)
library(identifyr)
context("Match Output")
test_that("string is padding correctly when X is present", {
expect_output(clean_x("X6789"), "X00006789")
expect_output(clean_x("X"), "X00000000")
expect_output(clean_x("0"), "X00000000")
expect_output(clean_x("789"), "X00000789")
expect_output(clean_x("NOT IN APS"), NA)
expect_output(clean_x("NO X#"), NA)
expect_output(clean_x("X 0123456"), "X00123456")
expect_output(clean_x(" X01234"), "X00001234")
expect_output(clean_x("X01234 "), "X00001234")
expect_output(clean_x(" X 01234 "), "X00001234")
expect_output(clean_x(" X 012 34"), "X00001234")
})
clean_x("X")
test_that("string is padding correctly when X is present", {
expect_output(clean_x("X6789"), "X00006789")
expect_output(clean_x("X"), NA)
expect_output(clean_x("0"), NA)
expect_output(clean_x("789"), "X00000789")
expect_output(clean_x("NOT IN APS"), NA)
expect_output(clean_x("NO X#"), NA)
expect_output(clean_x("X 0123456"), "X00123456")
expect_output(clean_x(" X01234"), "X00001234")
expect_output(clean_x("X01234 "), "X00001234")
expect_output(clean_x(" X 01234 "), "X00001234")
expect_output(clean_x(" X 012 34"), "X00001234")
})
test_that("cross-reference works properly", {
expect_output(clean_x("A000A20", using = "CII", value = "A07515123"))
})
test_that("cross-reference works properly", {
expect_output(clean_x("A000A20", using = "CII", value = "A07515123"), "X00000020")
})
library(identifyr)
?clean_x
library(identifyr)
library(identifyr)
?clean_x
devtools::install_github("georgemirandajr/identifyr")
library(identifyr)
?clean_x
clean_x("X00A02", using = "CASE", "PB021665")
clean_x("X00A02", using = "CASE")
library(devtools)
library(identifyr)
?clean_x
clean_x("X00020", using = "CASE", value = "PB021665")
obtain_id("X", using = "CASE", value = "PB021665")
install_github("georgemirandajr/identifyr")
library(testthat)
clean_case("PB6789")
library(identifyr)
clean_case("PB6789")
expect_output(clean_case("PB6789"), "PB006789")
expect_output(clean_case("PB"), NA)
clean_case("PB")
clean_case("0")
clean_case("789")
clean_case("NOT IN")
clean_case("PB 21")
clean_x("A000A20", using = "CII", value = "A07515123")
expect_output(clean_case("PB6789"), print("PB006789"))
expect_output(clean_x("X"), print(NA))
devtools::install_github("hadley/testthat")
library(testthat)
install.packages("testthat")
install.packages("testthat")
library(testthat)
expect_output(clean_case("PB6789"), print("PB006789"))
library(identifyr)
expect_output(clean_case("PB6789"), print("PB006789"))
expect_output(clean_x("X"), print(NA))
expect_output(clean_x("0"), print(NA))
expect_output(clean_x("789"), print("X00000789"))
expect_output(clean_x("NOT IN APS"), print(NA))
expect_output(clean_x("NO X#"), print(NA))
expect_output(clean_x("X 0123456"), print("X00123456"))
expect_output(clean_x(" X01234"), print("X00001234"))
expect_output(clean_x("X01234 "), print("X00001234"))
expect_output(clean_x(" X 01234 "), print("X00001234"))
expect_output(clean_x(" X 012 34"), print("X00001234"))
test_that("string is padding correctly when X is present", {
expect_output(clean_case("PB6789"), print("PB006789"))
expect_output(clean_x("X"), print(NA))
expect_output(clean_x("0"), print(NA))
expect_output(clean_x("789"), print("X00000789"))
expect_output(clean_x("NOT IN APS"), print(NA))
expect_output(clean_x("NO X#"), print(NA))
expect_output(clean_x("X 0123456"), print("X00123456"))
expect_output(clean_x(" X01234"), print("X00001234"))
expect_output(clean_x("X01234 "), print("X00001234"))
expect_output(clean_x(" X 01234 "), print("X00001234"))
expect_output(clean_x(" X 012 34"), print("X00001234"))
})
X:\AB109-AB109DATA\Reports\OtherReports\Weinberg
setwd("X:\AB109-AB109DATA\Reports\OtherReports\Weinberg")
setwd("X:/AB109-AB109DATA/Reports/OtherReports/Weinberg")
library(RODBC)
library(dplyr)
library(lubridate)
sapply(packages, require, character.only = TRUE)
packages <- c("RODBC", "dplyr", "lubridate", "Hmisc")
sapply(packages, require, character.only = TRUE)
)
channel <- odbcConnectExcel2007(path)
path <- "Active_Females_PRCS_&_Splits_on_010116.xlsx"
channel <- odbcConnectExcel2007(path)
sqlTables(channel)
prcs <- sqlFetch(channel, "Female_Active_010116_APS_PRCS")
odbcClose(channel)
channel <- odbcConnectExcel2007(path)
split <- sqlFetch(channel, "Females_Active_010116_Split")
odbcClose(channel)
colnames(prcs)
vars_from_prcs <- c("Active")
a <- prcs[ , vars_from_prcs]
length(a)
rm(a)
summary(prcs$BroadLscmiScore)
summary(prcs$LscmiScore)
summary(prcs$LSCMIScore)
148+17
colnames(prcs)
vars_from_prcs <- c("BroadLscmiScore", "LSCMIScore", "SupDistrictByOffice", "XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "GENDER", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
prcsNew <- prcs[ , vars_from_prcs]
colnames(split)
View(prcsNew)
vars_from_split <- c("Xnumber", "DefPrimaryChargeCode", "AreaOffice", "CaseloadCode", "Gender", "DOB", "Race", "CII", "FBI", "SSN", "AddressType", "AddressZipCode", "AddressCity", "SupvDistrict", "SPADistrict", "CaseNo", "GrantDispDate1", "NarcTestFlag", "LSCMIScore", "TotalActiveCases")
length(vars_from_split)
vars_from_prcs <- c("SupDistrictByOffice", "XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "GENDER", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
length(vars_from_prcs)
prcsNew <- prcs[ , vars_from_prcs]
summary(prcsNew$SupDistrictByOffice)
summary(factor(prcsNew$SupDistrictByOffice))
summary(factor(split$SupvDistrict))
summary(factor(prcsNew$`SUPERVISORIAL DIST`))
vars_from_prcs <- c("XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "GENDER", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
vars_from_prcs <- c("XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "GENDER", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
prcsNew <- prcs[ , vars_from_prcs]
vars_from_split <- c("Xnumber", "DefPrimaryChargeCode", "AreaOffice", "CaseloadCode", "Gender", "DOB", "Race", "CII", "FBI", "SSN", "AddressType", "AddressZipCode", "AddressCity", "SupvDistrict", "SPADistrict", "CaseNo", "GrantDispDate1", "NarcTestFlag", "LSCMIScore", "TotalActiveCases")
splitNew <- split[ , vars_from_split]
?days
snapshot <- ymd("2016-01-01")
class(prcsNew$`PB EXP DATE`)
a <- (prcsNew$`PB EXP DATE` - years(3)) + day(1)
a <- (prcsNew$`PB EXP DATE` - years(3)) + days(1)
head(a)
summary(a)
summary(prcsNew$`PB EXP DATE`)
View(prcsNew)
View(prcs)
prcsNew$SupervisionStartDate <- (prcsNew$`PB EXP DATE` - years(3)) + days(1)
rm(a)
prcsNew <- prcsNew %>% select(-`PB EXP DATE`)
colnames(prcsNew)
?rename
colnames(splitNew)
colnames(iris)
splitNew <- splitNew %>% rename(SupervisionStartDate = GrantDispDate1)
vars_from_split <- c("Xnumber", "DefPrimaryChargeCode", "AreaOffice", "CaseloadCode", "Gender", "DOB", "Race", "CII", "FBI", "SSN", "AddressType", "AddressZipCode", "AddressCity", "SupvDistrict", "SPADistrict", "CaseNo", "NarcTestFlag", "LSCMIScore", "TotalActiveCases", "GrantDispDate1")
splitNew <- split[ , vars_from_split]
# Rename the supervision start date variable
splitNew <- splitNew %>% rename(SupervisionStartDate = GrantDispDate1)
colnames(splitNew)
colnames(prcsNew)
?bind_rows
bind_rows(data.frame(x = 1:3), data.frame(y = 1:4))
a <- bind_rows(prcsNew, splitNew)
View(a)
rm(a)
cols <- colnames(splitNew)
a <- prcsNew %>% rename(cols = colnames(prcsNew))
colnames(prcsNew) <- colnames(splitNew)
colnames(splitNew)
colnames(prcsNew)
prcs$Type <- "PRCS"
splitNew$Type <- "Split"
vars_from_prcs <- c("XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "GENDER", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
prcsNew <- prcs[ , vars_from_prcs]
# Calculate the supervision start date based on PB EXP DATE
prcsNew$SupervisionStartDate <- (prcsNew$`PB EXP DATE` - years(3)) + days(1)
prcsNew <- prcsNew %>% select(-`PB EXP DATE`)
# Make a new variable indicating the type of case it is, e.g. PRCS
prcsNew$Type <- "PRCS"
# Select variables from the split list
vars_from_split <- c("Xnumber", "DefPrimaryChargeCode", "AreaOffice", "CaseloadCode", "Gender", "DOB", "Race", "CII", "FBI", "SSN", "AddressType", "AddressZipCode", "AddressCity", "SupvDistrict", "SPADistrict", "CaseNo", "NarcTestFlag", "LSCMIScore", "TotalActiveCases", "GrantDispDate1")
splitNew <- split[ , vars_from_split]
# Rename the supervision start date variable
splitNew <- splitNew %>% rename(SupervisionStartDate = GrantDispDate1)
# Make a new variable indicating the type of case, e.g. SPLIT
splitNew$Type <- "Split"
# Make the column names match in both datasets. Use the column names from the Split list
colnames(prcsNew) <- colnames(splitNew)
colnames(prcsNew)
colnames(splitNew)
combined <- rbind(prcsNew, splitNew)
View(combined)
696+162
View(prcsNew)
View(splitNew)
View(prcs)
View(split)
summary(prcsNew$Gender)
summary(splitNew$Gender)
vars_from_prcs <- c("XNUMBER", "PRIMARY CHARGE", "AREA OFFICE", "CASELOAD CODE", "DOB", "RACE", "CII", "FBI", "SSN", "ADDR TYPE", "ZIP CODE", "CITY", "SUPERVISORIAL DIST", "SPA DISTRICT", "PB CASE NO", "PB EXP DATE", "NARC TEST FLAG", "LSCMI SCORE", "TOTAL ACTIVE CASES")
prcsNew <- prcs[ , vars_from_prcs]
# Calculate the supervision start date based on PB EXP DATE
prcsNew$SupervisionStartDate <- (prcsNew$`PB EXP DATE` - years(3)) + days(1)
prcsNew <- prcsNew %>% select(-`PB EXP DATE`)
# Make a new variable indicating the type of case it is, e.g. PRCS
prcsNew$Type <- "PRCS"
# Select variables from the split list
vars_from_split <- c("Xnumber", "DefPrimaryChargeCode", "AreaOffice", "CaseloadCode", "DOB", "Race", "CII", "FBI", "SSN", "AddressType", "AddressZipCode", "AddressCity", "SupvDistrict", "SPADistrict", "CaseNo", "NarcTestFlag", "LSCMIScore", "TotalActiveCases", "GrantDispDate1")
splitNew <- split[ , vars_from_split]
# Rename the supervision start date variable
splitNew <- splitNew %>% rename(SupervisionStartDate = GrantDispDate1)
# Make a new variable indicating the type of case, e.g. SPLIT
splitNew$Type <- "Split"
# Make the column names match in both datasets. Use the column names from the Split list
colnames(prcsNew) <- colnames(splitNew)
combined <- rbind(prcsNew, splitNew)
View(combined)
?xtabs
combined$Age <- snapshot - combined$DOB
View(combined)
combined$Age <- years(snapshot - combined$DOB)
?years
as.period(interval(start = combined$DOB, end = snapshot))$year
combined$Age <- as.period(interval(start = combined$DOB, end = snapshot))$year
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot))$year)
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot))$day)
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot)), unit = "days")
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot)), unit = "hours")
as.period(interval(start = "2012-01-01", end = snapshot), unit = "days")
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot), unit = "days"))
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot), unit = "days")$days)
head(as.period(interval(start = combined$SupervisionStartDate, end = snapshot), unit = "days")$day)
combined$Days_in_AB109 <- as.period(interval(start = combined$SupervisionStartDate, end = snapshot), unit = "days")$day
View(combined)
1456/365
summary(combined$AddressZipCode)
combined$AddressZipCode <- substr(combined$AddressZipCode, start = 1, stop = 5)
View(combined)
summary(combined$AddressZipCode)
View(table(combined$AreaOffice))
colnames(combined)
sapply(combined[,2:3], table)
a <- sapply(combined[,2:3], table)
a[1]
a[2]
colnames(combined)
a <- sapply(combined[,c("AreaOffice", "Race", "AddressType", "SupvDistrict", "SPADistrict", "NarcTestFlag", "LSCMIScore", "Age")], table)
a[8]
a[7]
a[6]
a[5]
a[4]
a[3]
table(combined$SupvDistrict)
summary(combined$SupvDistrict)
?table
a <- sapply(combined[,c("AreaOffice", "Race", "AddressType", "SupvDistrict", "SPADistrict", "NarcTestFlag", "LSCMIScore", "Age")], table, useNA = "always")
a[3]
